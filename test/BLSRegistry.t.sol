// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.23;

import {Test} from "forge-std/Test.sol";
import {BLSRegistry} from "../src/bls/BLSRegistry.sol";
import {console} from "forge-std/console.sol";
import {BLS} from "../src/bls/BLS.sol";
import {BLSHelper} from "./BLSHelper.sol";

contract TestBLSRegistry is Test {
    BLSRegistry registry;
    address public sender = 0xc29FD138909e34ee815B1B57500Eb45F6Fa5853B;
    uint256 public nonce = 0;

    function setUp() public {
        registry = new BLSRegistry(address(this));
        BLSHelper.registerTestPulicKey(registry);
    }

    function testRegister() public {
        registry.register(1, 2);
        assertTrue(registry.isRegistered(1, 2));
    }

    function testUnregister() public {
        registry.register(1, 2);
        assertTrue(registry.isRegistered(1, 2));

        registry.unregister(1, 2);
        assertFalse(registry.isRegistered(1, 2));
    }

    function testSignlePublicKey() public {
        uint256 publicPointXC0 = 6923931194360002173156658695879898496652656711533801721253768358512622022842;
        uint256 publicPointXC1 = 159215286018691331721572728378262579103411221362353433368728468637961030101;

        registry.register(publicPointXC0, publicPointXC1);

        bytes memory signature =
            hex"2d96a4ba23594e3b719e8dc3a49a6a9791489fe435c55200529272cb79dfdb681e2881337f73877391f721338f9fa0cc6f3962a3fb92b16fd70ed52b57d39da1198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa086a75c71d60537f5dee1c23feef0c21e7b9a3cbce88233013d34863cc7b65ee1fbfb560211849e8c70295044801891ccf197e98766d9d223651e3c0ad7c7b09005a1cd72e8d0ec241161ab40d0c1c1188fa83b5e77e23badcd5494e590e09d50f4ece61bb066391ab12e7731b2add632cf4706667a594999c11da1f046fb0ba07113de8ed64dfb0fd55befa1625fa4381ba2bcf11c8b3732782765c093926f613272156dfb6b0347a45dbe5e7d1863cd2ec69aa548e0541b4e7332ae06d6a62";

        BLS.verifyPublicKey(signature);
    }

    function testFailSignlePublicKey() public {
        uint256 publicPointXC0 = 692393119436000217315665869587989849665265671153380172125376835851262202284;
        uint256 publicPointXC1 = 159215286018691331721572728378262579103411221362353433368728468637961030101;

        registry.register(publicPointXC0, publicPointXC1);

        bytes memory signature =
            hex"2d96a4ba23594e3b719e8dc3a49a6a9791489fe435c55200529272cb79dfdb681e2881337f73877391f721338f9fa0cc6f3962a3fb92b16fd70ed52b57d39da1198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa086a75c71d60537f5dee1c23feef0c21e7b9a3cbce88233013d34863cc7b65ee1fbfb560211849e8c70295044801891ccf197e98766d9d223651e3c0ad7c7b09005a1cd72e8d0ec241161ab40d0c1c1188fa83b5e77e23badcd5494e590e09d50f4ece61bb066391ab12e7731b2add632cf4706667a594999c11da1f046fb0ba07113de8ed64dfb0fd55befa1625fa4381ba2bcf11c8b3732782765c093926f613272156dfb6b0347a45dbe5e7d1863cd2ec69aa548e0541b4e7332ae06d6a62";

        BLS.verifyPublicKey(signature);
    }

    function testMultiPublicKey() public {
        uint256 public0PointXC0 = 18562755212375970903836073522882645972591900909781244664092154829507654413869;
        uint256 public0PointXC1 = 4993571414230822380268976230143954497759583385980495385921716918363066513511;
        registry.register(public0PointXC0, public0PointXC1);
        uint256 public1PointXC0 = 16027666194635211817405634775473457658920762186481158024607902347418154973129;
        uint256 public1PointXC1 = 12540170828451583645719033972193380351248480657599914087170318044771222590941;
        registry.register(public1PointXC0, public1PointXC1);
        uint256 public2PointXC0 = 7321276275748593883121292017147029577460167629120311138637582676740720109663;
        uint256 public2PointXC1 = 19859208148204439325871432001032269814944593698047667237387080683740338381608;
        registry.register(public2PointXC0, public2PointXC1);

        bytes memory signature =
            hex"23c0024408774f26b14588ed6de203cbc0e6c9a53c5b07b40aa1f0d13bf4ebaf16dc2a45437756138debe890096a41a21c83abdf605dd5333f55c5c0bcca8f41198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa1cbbd4922c4380a4ddd6f3971736869a414621442fb00b16f5e0b93860e2037209beb1c9c7459c9a6090fd57ca52cd852edf76dc04beaacf8e843e6303830e0f0b0a42e2091e4b8c8542931f8cd01b54ca71137a73baa43c68167cff9fecb867290a25aa131264e9592082ceb3928fa5754f1f82f36939ef117b2e91ff6d6e2d06e40521989dd9bc4229fbfc3db26353195f2880071981a155f426cb7902777724f232f4e961a4721b136f26e9d9bf34438517daeb227692142312f6e32529a11cbbd4922c4380a4ddd6f3971736869a414621442fb00b16f5e0b93860e2037209beb1c9c7459c9a6090fd57ca52cd852edf76dc04beaacf8e843e6303830e0f1bb97c33acf6798a2b60a8d0d9571223780cac9cc756643734330e6e862c95dd236f566c4d95330a807b030df7e8c7ed96845f3fe903d701e4e52648b63a37c91adadfcb9b579b8fb70b9cb928fc8c48852ceeb91853ed4fc24755d6c5d04f7f1d40c68b63fb5b266cead4334388c8941f5a9437b4d06dda636c3502dd1bd4ee1cbbd4922c4380a4ddd6f3971736869a414621442fb00b16f5e0b93860e2037209beb1c9c7459c9a6090fd57ca52cd852edf76dc04beaacf8e843e6303830e0f2be7e9da1c6b95d85b0a346d43bc983381bf27c63f4ae84ba131ee61eb50e328102fb20dedcb7611d49bdc00a4d251aedad2c4c223552b5e6665dfaab295285f12078ace17cee296a8ec593aeac496a6477b2d09a61e852ca5836ac5f79e72ac023acb3511a9e6e420d0e2cb92ad964c106993e4ce9360af8616b4ff70d04e67";

        BLS.verifyMultipleRaw(signature);
        BLS.verifyPublicKey(signature);
    }

    function testFailVaildatePublicKeys() public view {
        bytes memory aggSignature =
            hex"1bfea921c84b68bac22ede012fd539a105a71ef5f696dee1aa35ca5a09b6a2c1290b906378aa224650f9afcd49460dd8cabc73511b1f559635932f0bd2cee2cc198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa0e5abdaf928b5a81a688e1aaff277748cde67143e8b19bd500401412c60b209a04bb563ae5642ee48b95c6b2be75608f80ae632420a6939aa3ffb54f00dae90a279e3501141b1b21b66e09f000bba4799ac0c6e13fa726ab1d8f1730b5b657fe17809c92be48a37d58215d11c63af950f7e6264a53ab1eb0bfc5d4c8f90db63a26f7524f1598d555e666bbdec1d31e6d9c03d4a89bc6898424e62223c3fe556715b16967179b25435c3be6cb525047b3c1fa44f4a63830eb2f08faa94e67585a0e5abdaf928b5a81a688e1aaff277748cde67143e8b19bd500401412c60b209a04bb563ae5642ee48b95c6b2be75608f80ae632420a6939aa3ffb54f00dae90a2099063a5ebe0de9e90d84283007081ee0e9f83888293029fc6ce2073310e478118484a99860607636c001a75de54d45a78e22bb70429a1c11075230300bfa261996897f4729bbc1bf9cb8ff951018b6478e1c7c647fe06a61e7c8acf851e81a0c7407307412abfcb3f2fa69ba6cdd53f392cbb78b0f0592530af7e64ed628b1";

        // vm.expectRevert("publickey-number-error");
        BLS.validateBLSSignature(sender, nonce, aggSignature);
    }

    function testFailVaildateUnRegisterPublicKeys() public {
        registry.unregister(
            10630432570328290075474895242881751387989826399304554704250628665511229896250,
            17919728752616097025742957864412478070508797791854890034433031155819908323326
        );

        bytes memory aggSignature =
            hex"286b5c19b8567c28571478591c71595a64fbec3cd2c3c6ab35f9c67b16536ccb2db90d7b3616cf49f14fc26bbbaafb604bb24d86083d1391c41a6815315cbc14198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa0e5abdaf928b5a81a688e1aaff277748cde67143e8b19bd500401412c60b209a04bb563ae5642ee48b95c6b2be75608f80ae632420a6939aa3ffb54f00dae90a279e3501141b1b21b66e09f000bba4799ac0c6e13fa726ab1d8f1730b5b657fe17809c92be48a37d58215d11c63af950f7e6264a53ab1eb0bfc5d4c8f90db63a26f7524f1598d555e666bbdec1d31e6d9c03d4a89bc6898424e62223c3fe556715b16967179b25435c3be6cb525047b3c1fa44f4a63830eb2f08faa94e67585a0e5abdaf928b5a81a688e1aaff277748cde67143e8b19bd500401412c60b209a04bb563ae5642ee48b95c6b2be75608f80ae632420a6939aa3ffb54f00dae90a2099063a5ebe0de9e90d84283007081ee0e9f83888293029fc6ce2073310e478118484a99860607636c001a75de54d45a78e22bb70429a1c11075230300bfa261996897f4729bbc1bf9cb8ff951018b6478e1c7c647fe06a61e7c8acf851e81a0c7407307412abfcb3f2fa69ba6cdd53f392cbb78b0f0592530af7e64ed628b10e5abdaf928b5a81a688e1aaff277748cde67143e8b19bd500401412c60b209a04bb563ae5642ee48b95c6b2be75608f80ae632420a6939aa3ffb54f00dae90a11f61a5f324ebf3479b9c315a29a12d86b9d7e23cddc7c004ab78eb01dbf49eb0cadd2963c9dd40e6f1bc1dbabc7b31f7fbc29d0a72ba8e3fc86379fee824e141abf24a9361d5482db73c899424ceae4d866e5b9fe40d5e92640c641bfe580480d4c5cd6eb411b79cae8637ad3e2f2acaf978688d4bb4339ec91c3df13399649";

        BLS.validateBLSSignature(sender, nonce, aggSignature);
    }

    function testValidateBLSSignature() public {
        // bytes memory aggSignature =
        //     hex"286b5c19b8567c28571478591c71595a64fbec3cd2c3c6ab35f9c67b16536ccb2db90d7b3616cf49f14fc26bbbaafb604bb24d86083d1391c41a6815315cbc14198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa0e5abdaf928b5a81a688e1aaff277748cde67143e8b19bd500401412c60b209a04bb563ae5642ee48b95c6b2be75608f80ae632420a6939aa3ffb54f00dae90a279e3501141b1b21b66e09f000bba4799ac0c6e13fa726ab1d8f1730b5b657fe17809c92be48a37d58215d11c63af950f7e6264a53ab1eb0bfc5d4c8f90db63a26f7524f1598d555e666bbdec1d31e6d9c03d4a89bc6898424e62223c3fe556715b16967179b25435c3be6cb525047b3c1fa44f4a63830eb2f08faa94e67585a0e5abdaf928b5a81a688e1aaff277748cde67143e8b19bd500401412c60b209a04bb563ae5642ee48b95c6b2be75608f80ae632420a6939aa3ffb54f00dae90a2099063a5ebe0de9e90d84283007081ee0e9f83888293029fc6ce2073310e478118484a99860607636c001a75de54d45a78e22bb70429a1c11075230300bfa261996897f4729bbc1bf9cb8ff951018b6478e1c7c647fe06a61e7c8acf851e81a0c7407307412abfcb3f2fa69ba6cdd53f392cbb78b0f0592530af7e64ed628b10e5abdaf928b5a81a688e1aaff277748cde67143e8b19bd500401412c60b209a04bb563ae5642ee48b95c6b2be75608f80ae632420a6939aa3ffb54f00dae90a11f61a5f324ebf3479b9c315a29a12d86b9d7e23cddc7c004ab78eb01dbf49eb0cadd2963c9dd40e6f1bc1dbabc7b31f7fbc29d0a72ba8e3fc86379fee824e141abf24a9361d5482db73c899424ceae4d866e5b9fe40d5e92640c641bfe580480d4c5cd6eb411b79cae8637ad3e2f2acaf978688d4bb4339ec91c3df13399649";
        bytes memory aggSignature = BLSHelper.getBLSSignature(sender, nonce);
        assertTrue(BLS.validateBLSSignature(sender, nonce, aggSignature));
    }
}
