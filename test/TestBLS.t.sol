// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.23;

import {Test} from "forge-std/Test.sol";
import {BLS} from "../src/bls/BLS.sol";
import {BLSRegistry} from "../src/bls/BLSRegistry.sol";

contract TestBLS is Test {
    function testVerifySingle() public {
        uint256[2] memory signature;
        uint256[4] memory pubkey;
        uint256[2] memory message;

        signature[0] = 19905630207993566245219666677470637136587276019280656805026541833712249905852;
        signature[1] = 1019189277969543190112841909500249566962431416979225378272584036265439876939;
        message[0] = 16685283042278012095840917007996570717923989086424752750999740044674504414203;
        message[1] = 17788878714869107539255171751663809100328787430446550666907776742050292520891;
        pubkey[0] = 7137159607728178943737672879875201623317467957024905555599425697670759935618;
        pubkey[1] = 19412475625440450891342354126621544866181621154319311417682545180853231206345;
        pubkey[2] = 8507678276313774205947275247764216452821138396833793566590313090844458645479;
        pubkey[3] = 10705526904121183264899980621452804686517808992713226650268180015925185892875;

        (bool verified) = BLS.verifySingle(signature, pubkey, message);
        assertTrue(verified);
    }

    function testVerifyMultiple() public {
        uint256[2] memory signature;
        uint256[4][] memory pubkeys = new uint256[4][](2);
        uint256[2] memory message;

        signature[0] = 11982053741765309869614975650436408414480409414655419755381077188147272345557;
        signature[1] = 19628369590794600556363978835724503528200396810903557895605093589224886490819;
        message[0] = 5658683324832764476960154803703557922686354701530098027155484514076392516128;
        message[1] = 16071338799424213680761462003332656615827825997241749078141033608856239696693;
        pubkeys[0][0] = 3721969910755263118863758916660256898669206418175294296393207140516337555991;
        pubkeys[0][1] = 20569362456432828041276639280360333077158697337274262703710927105933617528203;
        pubkeys[0][2] = 1781060503439844184823416248464134409592625987585608226511453958645785327900;
        pubkeys[0][3] = 4131432457551112374708891326516360065371739638782126304588500384798791330677;
        pubkeys[1][0] = 516947159203562106368502607454719216444973161961335776825510692988935639691;
        pubkeys[1][1] = 12252239579865661806991100547229389871127513667923965331895602520575515760028;
        pubkeys[1][2] = 9873397751163904057986467315461167894899002621173631304906039191738079257173;
        pubkeys[1][3] = 8672224877889847028316140878566877035079221330884430711148074915759574884527;

        (bool verified) = BLS.verifyMultiple(signature, pubkeys, message);
        assertTrue(verified);
    }

    function testVerifySingleRaw() public {
        bytes memory signature =
            hex"254455e890c40ba691839d79d99f7825208db7820b62e07f8953626fb70e92a52eb655a812aa2eefc5d5f006f025493f61107d86b14fc8800d4b69898a20aef3198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa1bf37398cc9aac0d60817ecf371053e0c42ae1484eb55bf93b307a803e3109201e82321dcc0e522b4bf960ed79f9ef3eb7a9bd1d8aa3e4c9bb73db224dd1c12c005a1cd72e8d0ec241161ab40d0c1c1188fa83b5e77e23badcd5494e590e09d50f4ece61bb066391ab12e7731b2add632cf4706667a594999c11da1f046fb0ba07113de8ed64dfb0fd55befa1625fa4381ba2bcf11c8b3732782765c093926f613272156dfb6b0347a45dbe5e7d1863cd2ec69aa548e0541b4e7332ae06d6a62";

        uint256 count = BLS.getPublicKeyCount(signature);
        assertEq(count, 1);

        (bool verified) = BLS.verifySingleRaw(signature);
        assertTrue(verified);
    }

    function testVerifyMultipleRaw() public {
        bytes memory signature =
            hex"19c6f8343215804fbb2bf770fafc706b8d948c8e0ee58b3c228b6b67be3faf5222982ffc0dd469e0c4c6c079ae45ea9328a21b45737cd38c33b2eb8423df83ed198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa2bb94a3f4d6f704fb849553d87b5b93651d8152cd57e73ed64a21b522b314e960ea20bf13a799dac21705e6278111e721bdfcf0f46afadeb717ee391e75f34cf21c5a0ee154c229c8fdf165d9b90ec046b1f7563ab759a5a15edffe96a379d9f1f7aab9a23b0dcf65f14d488d0c993c9703ec5758866fe4bdb1d8c730d73212019431c2bcf3f15e6225ecf2a0c9275a21734035ec86628201a9925ac0e311fd0068c4db402d621b1a6688463c0c26722bca416b5b2567cc94c955dee80fc3ff02bb94a3f4d6f704fb849553d87b5b93651d8152cd57e73ed64a21b522b314e960ea20bf13a799dac21705e6278111e721bdfcf0f46afadeb717ee391e75f34cf1e83cd104e06aec06786fa449679f1743f31ce9798a60bcb949e1bd8442b01602a469fa5d851d96f88c36284864a19d352d46d1d55f4eca19039b9fc21a4b326300145541a374e2fe1a733b48a2792707319bafd341c06a62d2fe88de0a995c3007d3b002c5c430adf488a2ee7c92dfa564985c057091190619525efcc2e2f7a";

        uint256 count = BLS.getPublicKeyCount(signature);
        assertEq(count, 2);

        (bool verified) = BLS.verifyMultipleRaw(signature);
        assertTrue(verified);
    }

    function testVerifyAddressToPoint() public {
        (uint256[2] memory point) = BLS.opHashToPoint(keccak256(abi.encode("{}")));
        assertEq(point[0], 11316325862963164929267760355722765581957340287538887431785069677517694832287);
        assertEq(point[1], 17961057848897108082366631608308699802165806961260476012029318329810107555021);
    }

    function testVerifyHm() public {
        uint256[2] memory point;

        bytes memory signature =
            hex"0d345e4c90a590e9134bfa1bc4d59046d2f374eddb6d0b0e7061571fccce546a0b5cff71e03347a3ce83163bf60b9a3d9f5bc03411c4baa9f252ba24967713d6198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa1904d03ef0dc4666cae574f139b8fea1ca276f07f36d32efd04409e98b0c0e9f27b5993675b697b8b977f920b9890384ad267f8d416a3d00c7d95ac036b4dccd279e3501141b1b21b66e09f000bba4799ac0c6e13fa726ab1d8f1730b5b657fe17809c92be48a37d58215d11c63af950f7e6264a53ab1eb0bfc5d4c8f90db63a26f7524f1598d555e666bbdec1d31e6d9c03d4a89bc6898424e62223c3fe556715b16967179b25435c3be6cb525047b3c1fa44f4a63830eb2f08faa94e67585a";

        uint256 count = BLS.getPublicKeyCount(signature);
        assertEq(count, 1);

        point = BLS.opHashToPoint(keccak256(abi.encode("{}")));
        (bool verified) = BLS.verifyHm(signature, point);
        assertTrue(verified);
    }
}
